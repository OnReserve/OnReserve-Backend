datasource db {
  provider     = "mysql"
  url          = "mysql://77qqb0uapsq83hce31eq:pscale_pw_5t7EwcGl9kfIV0M1f7OhfMeKN6dyX6vppWpyUF7tmTT@aws.connect.psdb.cloud:3306/onreserve?sslaccept=strict"
  relationMode = "prisma"
  // url      = "mysql://kiiloleecom_admin:database$password@198.244.229.140:3306/kiiloleecom_api"
}

generator client {
  provider = "prisma-client-js"
}

model BookingHistory {
  id        Int       @id @default(autoincrement())
  userId    Int
  bookingId Int
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  booking   Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade)
}

model Booking {
  id           Int              @id @default(autoincrement())
  userId       Int
  eventId      Int
  approved     Boolean          @default(false)
  completed    Boolean
  bookingToken String
  qrcode       String
  economyCount Int
  vipCount     Int
  createdAt    DateTime?        @default(now())
  updatedAt    DateTime?        @updatedAt
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  event        Event            @relation(fields: [eventId], references: [id], onDelete: Cascade)
  histories    BookingHistory[]
}

model Category {
  id        Int             @id @default(autoincrement())
  name      String
  createdAt DateTime?       @default(now())
  updatedAt DateTime?       @updatedAt
  events    CategoryEvent[]
}

model CategoryEvent {
  id         Int       @id @default(autoincrement())
  categoryId Int
  eventId    Int
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
  category   Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  event      Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model Company {
  id        Int           @id @default(autoincrement())
  owner     Int
  name      String
  bio       String
  profPic   String?
  coverPic  String?
  rating    String
  createdAt DateTime?     @default(now())
  updatedAt DateTime?     @updatedAt
  user      User          @relation(fields: [owner], references: [id], onDelete: Cascade)
  events    Event[]
  users     CompanyUser[]
}

model CompanyUser {
  id        Int       @id @default(autoincrement())
  companyId Int
  userId    Int
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  company   Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EventGallery {
  id         Int       @id @default(autoincrement())
  eventId    Int
  eventPhoto String
  createdAt  DateTime?
  updatedAt  DateTime?
  event      Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model EventLocation {
  id        Int       @id @default(autoincrement())
  eventId   Int
  city      String
  street    String
  venue     String
  latitude  Float
  longitude Float
  createdAt DateTime?
  updatedAt DateTime?
  event     Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model EventReview {
  id        Int       @id @default(autoincrement())
  userId    Int
  eventId   Int
  comment   String
  stars     Int
  createdAt DateTime?
  updatedAt DateTime?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  event     Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model Event {
  id             Int              @id @default(autoincrement())
  userId         Int
  companyId      Int
  title          String
  desc           String           @db.LongText
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  eventStartTime DateTime
  eventEndTime   DateTime
  eventDeadline  DateTime
  approved       Boolean
  approvedBy     Int?
  economySeats   Int
  economyPrice   Int
  vipSeats       Int
  vipPrice       Int
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  company        Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  approver       User?            @relation("UserApprovedEvents", fields: [approvedBy], references: [id], onDelete: Cascade)
  paid           Boolean          @default(false)
  categories     CategoryEvent[]
  galleries      EventGallery[]
  locations      EventLocation[]
  reviews        EventReview[]
  bookings       Booking[]
  PaymentRequest PaymentRequest[]
}

model PersonalAccessToken {
  userId        Int       @unique
  tokenableType String
  tokenableId   Int
  name          String
  token         String
  abilities     String?
  lastUsedAt    DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: userId, references: id)

  @@id([userId])
}

model PasswordReset {
  email     String   @id
  token     String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [email], references: [email])
}

model Profile {
  id          Int       @id @default(autoincrement())
  userId      Int?      @unique
  phoneNumber String?
  profilePic  String?
  coverPic    String?
  bio         String?
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  user        User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                   Int                   @id @default(autoincrement())
  fname                String
  lname                String
  email                String                @unique
  emailVerifiedAt      DateTime?
  password             String
  role                 Roles                 @default(USER)
  rememberToken        String?
  createdAt            DateTime?             @default(now())
  updatedAt            DateTime?             @updatedAt
  bookingHistories     BookingHistory[]
  bookings             Booking[]
  companies            Company[]
  companyUsers         CompanyUser[]
  eventReviews         EventReview[]
  events               Event[]
  eventsApprovedBy     Event[]               @relation("UserApprovedEvents")
  profile              Profile?
  passwordResets       PasswordReset[]
  personalAccessTokens PersonalAccessToken[]
}

model PaymentRequest {
  id           Int     @id @default(autoincrement())
  amount       Int
  cbe_account  String
  cbe_fullname String
  paid         Boolean @default(false)
  eventId      Int     @unique
  event        Event   @relation(fields: [eventId], references: [id])
}

enum Roles {
  USER
  SUPERADMIN
}
